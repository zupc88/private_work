*******************************************************************************************************
                                                                Git 
*******************************************************************************************************
Repository 생성 

git init
git add .
git status
git commit -m "xxxx"
git remote add origin https://github.com/zupc88/monolith2.git
git push -u origin master



배포할때, yaml파일은 /manefests디렉토리 로 통일 (deployment.yml, service.yaml, hpa.yaml 등)
deployment.yaml 파일은 ACR 이미지 레지스트리URL이 들어가므로 우리 환겨엥 맞게 수정 필요(ccteam4acr.azurecr.io)


*******************************************************************************************************
                                                           CI
*******************************************************************************************************
												  
http://devops.azure.com

PIPELINES

New Pipiline

Classic Editor (아래)

GitHub -> 레퍼지터리 선택 -> 선택

Empty job 선택

Name 지정

Agent Specificatin : ubuntu-18.04

Agejtn job 1에서 "+" 버튼 누르고, maven, copy files, publish  "build" artifact , docker 추가

copy file 설정 변경
가. 소스폴더: $(system.defaultworkingdirectory)
나. 컨텐츠:
**/*.jar
Dockerfile
azure/*
manifests/*
다. 타겟폴더: $(build.artifactstagingdirectory) 

docker
Container registry: acr
container repository: monolith2


SAVE

RUN


*******************************************************************************************************
                                                           CD
*******************************************************************************************************
Releases

Empty job 선택

왼쪽 Artifact에  + 누르고 소스 선택 

 트리거 -> 맨위에 Enabled 선택
 
 Task -> Agent job -> Agent Specification -. Ubuntu 18

Agent Job 에서 + 누르고  Deploy to kubernetes 추가

deploy 선택  -> 
•Kubernetes service connection 에  aks 선택
•Manifests 에 폴더를 선택 하고 아래처럼 * (아스테리스크) 표시
•/../manefest/*
•Containers 는 변경할 이미지 명    
ccteam4acr.azurecr.io/monolith:$(Build.BuildId)    






CI에 빌드하면하면, Webhook에 의해 CD까지 수행됨.
(Kubernetes에서 pod상태 확인 필요)






